<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AStar.Dev.Functional.Extensions</name>
    </assembly>
    <members>
        <member name="T:AStar.Dev.Functional.Extensions.EnumerableExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.EnumerableExtensions.FirstOrNone``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.None">
            <summary>
                The <see cref="T:AStar.Dev.Functional.Extensions.None" /> class that exists for when we have no object
            </summary>
        </member>
        <member name="P:AStar.Dev.Functional.Extensions.None.Value">
            <summary>
                The Value will always return an instance of <see cref="T:AStar.Dev.Functional.Extensions.None" />, it can never return an actual value
            </summary>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.None.Of``1">
            <summary>
                The Of{T} method can be used to return an instance of the generic <see cref="T:AStar.Dev.Functional.Extensions.None`1" /> when there is no actual value to return
            </summary>
            <typeparam name="T">The type of the original object that this instance of <see cref="T:AStar.Dev.Functional.Extensions.None" /> is replacing</typeparam>
            <returns>The appropriate type of <see cref="T:AStar.Dev.Functional.Extensions.None`1" /></returns>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.None`1">
            <summary>
                The <see cref="T:AStar.Dev.Functional.Extensions.None`1" /> class replaces the object when there is no object available
            </summary>
            <typeparam name="T">The type of the original object</typeparam>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.None`1.ToString">
            <summary>
                The ToString method is overridden to always return "None"
            </summary>
            <returns>"None" no matter what the original type was</returns>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.Option">
            <summary>
                The <see cref="T:AStar.Dev.Functional.Extensions.Option" /> class that contains the original object
            </summary>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Option.Optional``1(``0)">
            <summary>
                The Optional method will convert the 'raw' object to an <see cref="T:AStar.Dev.Functional.Extensions.Option`1" />
            </summary>
            <typeparam name="T">The type of the original object</typeparam>
            <param name="obj">The object to return as an option</param>
            <returns>The original object as an option (and implemented as an instance of <see cref="T:AStar.Dev.Functional.Extensions.Some`1" /></returns>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.OptionExtensions">
            <summary>
                The <see cref="T:AStar.Dev.Functional.Extensions.OptionExtensions" /> class contains a basic set of extension methods to help map, filter, etc. the original object
            </summary>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.OptionExtensions.Map``2(AStar.Dev.Functional.Extensions.Option{``0},System.Func{``0,``1})">
            <summary>
                The Map{T,TResult} method will either map the Some{T} to a new Some or return a new None of the specified result type
            </summary>
            <typeparam name="T">The type of the source object</typeparam>
            <typeparam name="TResult">The type of object expected from the map</typeparam>
            <param name="obj">The object to map</param>
            <param name="map">The Map function</param>
            <returns>Either a new Some or a new None of the specified type</returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.OptionExtensions.Filter``1(AStar.Dev.Functional.Extensions.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.OptionExtensions.Reduce``1(AStar.Dev.Functional.Extensions.Option{``0},``0)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="substitute"></param>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.OptionExtensions.Reduce``1(AStar.Dev.Functional.Extensions.Option{``0},System.Func{``0})">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="substitute"></param>
            <returns></returns>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.Option`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Option`1.op_Implicit(AStar.Dev.Functional.Extensions.None)~AStar.Dev.Functional.Extensions.Option{`0}">
            <summary>
            </summary>
            <param name="_"></param>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Option`1.op_Implicit(`0)~AStar.Dev.Functional.Extensions.Option{`0}">
            <summary>
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.Result`2">
             <summary>
            
             </summary>
             <typeparam name="TError"></typeparam>
             <typeparam name="TSuccess"></typeparam>
        </member>
        <member name="P:AStar.Dev.Functional.Extensions.Result`2.Value">
             <summary>
            
             </summary>
        </member>
        <member name="P:AStar.Dev.Functional.Extensions.Result`2.Error">
             <summary>
            
             </summary>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Result`2.#ctor(`1,`0,System.Boolean)">
             <summary>
            
             </summary>
             <param name="successObject"></param>
             <param name="errorObject"></param>
             <param name="isSuccess"></param>
        </member>
        <member name="P:AStar.Dev.Functional.Extensions.Result`2.IsSuccess">
             <summary>
            
             </summary>
        </member>
        <member name="P:AStar.Dev.Functional.Extensions.Result`2.IsFailure">
             <summary>
            
             </summary>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Result`2.Success(`1)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Result`2.Failure(`0)">
             <summary>
            
             </summary>
             <param name="error"></param>
             <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Result`2.op_Implicit(`1)~AStar.Dev.Functional.Extensions.Result{`0,`1}">
             <summary>
            
             </summary>
             <param name="success"></param>
             <returns></returns>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Result`2.op_Implicit(`0)~AStar.Dev.Functional.Extensions.Result{`0,`1}">
             <summary>
            
             </summary>
             <param name="error"></param>
             <returns></returns>
        </member>
        <member name="T:AStar.Dev.Functional.Extensions.Some`1">
            <summary>
                The generic <see cref="T:AStar.Dev.Functional.Extensions.Some`1" /> class contains the result for a successful method
            </summary>
            <typeparam name="T">The type of the return object</typeparam>
            <remarks>
            </remarks>
            <param name="content">The content (actual result) object</param>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Some`1.#ctor(`0)">
            <summary>
                The generic <see cref="T:AStar.Dev.Functional.Extensions.Some`1" /> class contains the result for a successful method
            </summary>
            <typeparam name="T">The type of the return object</typeparam>
            <remarks>
            </remarks>
            <param name="content">The content (actual result) object</param>
        </member>
        <member name="P:AStar.Dev.Functional.Extensions.Some`1.Content">
            <summary>
                The content (actual result) object
            </summary>
        </member>
        <member name="M:AStar.Dev.Functional.Extensions.Some`1.ToString">
            <summary>
                Overrides the default ToString to return the object type or &lt;null&gt;
            </summary>
            <remarks>
                Once the ToJson method (in AStar.Dev.Utilities) respects the 'Mask', 'Ignore' etc. attributes, we can reconsider whether this method returns the actual object
            </remarks>
            <returns>The object type name or null.</returns>
        </member>
    </members>
</doc>
